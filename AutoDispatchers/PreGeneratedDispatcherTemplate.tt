<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NetworkOperation" #>
<#@ import namespace="TemplateDispatcher" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.Boolean" name="AOTSupport" #>
<#@ parameter type="NetworkOperation.Side" name="Side" #>
<#@ parameter type="NetworkOperation.OperationRuntimeModel" name="Model" #>
<#@ output extension=".generated.cs" #>

using System;
using System.Threading.Tasks;
using System.Threading;
using NetworkOperation;
using Microsoft.Extensions.Logging;

namespace NetworkOperations.Dispatching
{
    public sealed class PreGeneratedDispatcher<TRequest, TResponse> : BaseDispatcher<TRequest, TResponse>
           where TRequest : IOperationMessage, new() where TResponse : IOperationMessage, new()
    {
        public PreGeneratedDispatcher(BaseSerializer serializer, IHandlerFactory factory, OperationRuntimeModel model, ILoggerFactory logger, DescriptionRuntimeModel descriptionRuntimeModel) : base(serializer, factory, model, logger,descriptionRuntimeModel)
        {
        }

        protected override Task<DataWithStateCode> ProcessHandler(TRequest message, RequestContext<TRequest> context, CancellationToken token)
        {
            switch (context.OperationDescription.Code)
            {
<# foreach (OperationDescription op in Model) { if (op == null || !op.Handle.HasFlag(Side)) continue; #>
               case <#=op.Code#>: return GenericHandle<<#=op.OperationType.FullName#>, <#=op.ResultType.ToCSharpFormat()#>>(message, context, token);
<# } #>
            }
            throw new InvalidOperationException($"Wrong code operation {context.OperationDescription.Code}");
        }
    }
    
<# if (AOTSupport) {#> 
        public static partial class AOTSupport
        {
            public static void GeneratedDefinitions()
            {
<# foreach (OperationDescription op in Model){#>
                VirtualGenericMethodsDefinition<<#=op.OperationType.FullName#>>();                                        
<#}#>
            
<# foreach (Type resultType in Model.Select(d => d.ResultType).Distinct()){#>
                VirtualGenericMethodsDefinition<<#=resultType.ToCSharpFormat()#>>();                                       
<#}#>
            }            
            static partial void VirtualGenericMethodsDefinition<T>();            
        }
<# } #> 
}